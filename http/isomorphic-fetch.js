"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsomorphicFetchHttpLibrary = void 0;
const http_1 = require("./http");
const rxjsStub_1 = require("../rxjsStub");
require("whatwg-fetch");
class IsomorphicFetchHttpLibrary {
    send(request) {
        let method = request.getHttpMethod().toString();
        let body = request.getBody();
        const resultPromise = fetch(request.getUrl(), {
            method: method,
            body: body,
            headers: request.getHeaders(),
            credentials: "same-origin"
        }).then((resp) => {
            const headers = {};
            resp.headers.forEach((value, name) => {
                headers[name] = value;
            });
            const body = {
                text: () => resp.text(),
                binary: () => resp.blob()
            };
            return new http_1.ResponseContext(resp.status, headers, body);
        });
        return (0, rxjsStub_1.from)(resultPromise);
    }
}
exports.IsomorphicFetchHttpLibrary = IsomorphicFetchHttpLibrary;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNvbW9ycGhpYy1mZXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlzb21vcnBoaWMtZmV0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQW9FO0FBQ3BFLDBDQUErQztBQUMvQyx3QkFBc0I7QUFFdEIsTUFBYSwwQkFBMEI7SUFFNUIsSUFBSSxDQUFDLE9BQXVCO1FBQy9CLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoRCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFN0IsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxQyxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxJQUFXO1lBQ2pCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzdCLFdBQVcsRUFBRSxhQUFhO1NBQzdCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUNsQixNQUFNLE9BQU8sR0FBK0IsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxFQUFFO2dCQUNuRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxJQUFJLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2FBQzFCLENBQUM7WUFDRixPQUFPLElBQUksc0JBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBQSxlQUFJLEVBQTJCLGFBQWEsQ0FBQyxDQUFDO0lBRXpELENBQUM7Q0FDSjtBQTNCRCxnRUEyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBMaWJyYXJ5LCBSZXF1ZXN0Q29udGV4dCwgUmVzcG9uc2VDb250ZXh0fSBmcm9tICcuL2h0dHAnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3J4anNTdHViJztcbmltcG9ydCBcIndoYXR3Zy1mZXRjaFwiO1xuXG5leHBvcnQgY2xhc3MgSXNvbW9ycGhpY0ZldGNoSHR0cExpYnJhcnkgaW1wbGVtZW50cyBIdHRwTGlicmFyeSB7XG5cbiAgICBwdWJsaWMgc2VuZChyZXF1ZXN0OiBSZXF1ZXN0Q29udGV4dCk6IE9ic2VydmFibGU8UmVzcG9uc2VDb250ZXh0PiB7XG4gICAgICAgIGxldCBtZXRob2QgPSByZXF1ZXN0LmdldEh0dHBNZXRob2QoKS50b1N0cmluZygpO1xuICAgICAgICBsZXQgYm9keSA9IHJlcXVlc3QuZ2V0Qm9keSgpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdFByb21pc2UgPSBmZXRjaChyZXF1ZXN0LmdldFVybCgpLCB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGJvZHk6IGJvZHkgYXMgYW55LFxuICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdC5nZXRIZWFkZXJzKCksXG4gICAgICAgICAgICBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiXG4gICAgICAgIH0pLnRoZW4oKHJlc3A6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbiAgICAgICAgICAgIHJlc3AuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgaGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgIHRleHQ6ICgpID0+IHJlc3AudGV4dCgpLFxuICAgICAgICAgICAgICBiaW5hcnk6ICgpID0+IHJlc3AuYmxvYigpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZUNvbnRleHQocmVzcC5zdGF0dXMsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnJvbTxQcm9taXNlPFJlc3BvbnNlQ29udGV4dD4+KHJlc3VsdFByb21pc2UpO1xuXG4gICAgfVxufVxuIl19